#!/usr/bin/env python3

################################################################################
#
# MIT License
#
# Copyright 2024-2025 AMD ROCm(TM) Software
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
# ies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
# PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
# CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
################################################################################


"""
Render a matrix stored in a msgpack file as an image.
"""
import argparse
import os
import pathlib
import sys

repo_dir = pathlib.Path(__file__).resolve().parent.parent
sys.path.append(str(repo_dir / "scripts" / "lib"))

import matrix_utils  # noqa: E402

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("--verbose", "-v", action="count", default=0)
    parser.add_argument("input", nargs="+", help="Input file")
    parser.add_argument("--output", default=[], nargs="+", help="Output file")

    args = parser.parse_args()

    if len(args.output) == 0:

        def makeOutput(inFile):
            (base, _) = os.path.splitext(inFile)
            return base + ".png"

        args.output = list(map(makeOutput, args.input))

    if len(args.output) != len(args.input):
        print(
            "If specified, number of output arguments must equal "
            "number of input arguments"
        )
        exit(-1)

    for inFile, outFile in zip(args.input, args.output):
        if args.verbose > 0:
            print(args)

        fig = matrix_utils.showMatrix(inFile)
        fig.savefig(outFile)
        print(f"Wrote {outFile}")
