#!/bin/bash

################################################################################
#
# MIT License
#
# Copyright 2024-2025 AMD ROCm(TM) Software
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
# ies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
# PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
# CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
################################################################################

# This pre-commit hook checks if any versions of clang-format
# are installed, and if so, uses the installed version to format
# the staged changes.

export PATH=/opt/clang-format/bin:/usr/bin:/bin::/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin

# Redirect stdout to stderr.
exec >&2

# Do everything from top - level
cd $(git rev-parse --show-toplevel)

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

if [[ "$1" == "--reformat" ]]; then
    files=$(git ls-files --exclude-standard)
else
    files=$(git diff-index --cached --name-only $against)
fi

[[ -z "$files" ]] && exit

# Change the copyright date at the top of any text files
for file in $files; do
    echo "Processing copyright dates in $file"
    if [[ -e $file ]]; then
        /usr/bin/perl -pi -e 'INIT { exit 1 if !-f $ARGV[0] || -B $ARGV[0]; $year = (localtime)[5] + 1900 }
            s/^([*\/#[:space:]]*)Copyright\s+(?:\(C\)\s*)?(\d+)(?:\s*-\s*\d+)?/qq($1Copyright $2@{[$year != $2 ? "-$year" : ""]})/ie
            if $. < 10' "$file" && git add -u "$file"
    fi
done

# do the formatting
for file in $files; do
    if [[ -e $file ]] && echo $file | grep -Eq '\.c$|\.h$|\.hpp$|\.cpp$|\.cl$|\.in$|\.txt$|\.yaml$|\.yml$|\.sh$|\.py$|\.pl$|\.cmake$|\.md$|\.rst$|\.groovy$|\.ini$|\.awk$|\.csv$'; then
        echo "Processing line endings in $file"
        sed -i -e 's/[[:space:]]*$//' "$file" # Remove whitespace at end of lines
        sed -i -e '$a\' "$file" # Add missing newline to end of file
        
        if grep -q $'\t' "$file"; then # Replace tabs with spaces.
            echo "Removing tabs in $file"
            tmpfile=$(mktemp /tmp/githook.XXXXXX)
            expand -t 4 "${file}" > "${tmpfile}"
            cat "${tmpfile}" > "${file}"
            rm -rf "${tmpfile}"
        fi

        echo "Converting non-ASCII characters to ASCII equivalents in $file"
        # Convert UTF8 non-ASCII to ASCII
        temp=$(mktemp)
        [[ -w $temp ]] || exit
        iconv -s -f utf-8 -t ascii//TRANSLIT "$file" > "$temp" || exit
        chmod --reference="$file" "$temp" || exit
        mv -f "$temp" "$file" || exit
        git add -u "$file"
    fi
done

# if clang-format exists, run it on C/C++ files
if command -v clang-format >/dev/null; then
    for file in $files; do
       if [[ -e $file ]] && echo $file | grep -Eq '\.c$|\.h$|\.hpp$|\.cpp$|\.cl$|\.h\.in$|\.hpp\.in$|\.cpp\.in$'; then
            echo "clang-format $file"
            clang-format -i -style=file "$file"
            git add -u "$file"
        fi
    done
fi

# if black(python formatter) exists, run it on python files
if command -v black >/dev/null; then
    for file in $files; do
       if [[ -e $file ]] && ( echo $file | grep -Eq '\.py$' ||  grep -q "^#!.*python" "$file" ) ; then
            echo "black $file"
            black "$file"
            git add -u "$file"
        fi
    done
fi

