---
include: rocblas_common.yaml
include: known_bugs.yaml

Definitions:

  - &size_t_xy_range
    - { N: 1048600, incx:  4096, incy:     1 }
    - { N: 1048600, incx:     1, incy:  4096 }
    # TODO add back when workaround for OpenBLAS on windows negative overflow failures
    #- { N: 1048600, incx: -4096, incy:     1 }
    #- { N: 1048600, incx:     1, incy: -4096 }

  - &incx_incy_range
    - { incx:  1, incy:  1 }
    - { incx:  1, incy: -1 }
    - { incx: -1, incy:  1 }
    - { incx: -3, incy:  2 }
    - { incx:  0, incy:  1 }
    - { incx:  0, incy:  0 }
    # - { incx:  1, incy:  0 } # Indeterminate when y is output

  - &size_t_pos_neg_xy_range
    - { N: 4,          incx: *c_pos_x2_overflow_int32, incy: 1 } # small operation count, should overflow x
    - { N: 4,          incx: *c_neg_x2_overflow_int32, incy: 1 } # small operation count, should overflow x
    - { N: 4,          incx: 1, incy: *c_pos_x2_overflow_int32 } # small operation count, should overflow y
    - { N: 4,          incx: 1, incy: *c_neg_x2_overflow_int32 } # small operation count, should overflow y

  - &incx_incy_range_small
    - { incx: 1, incy: 1 }
    - { incx: 3, incy: -3 }

Tests:

# for bad_arg no arguments should be used by test code
  - name: blas1_bad_arg
    category: quick
    api: [ C, FORTRAN, FORTRAN_64 ]
    function:
      - copy_bad_arg:  *single_double_precisions_complex_real
      - copy_batched_bad_arg:  *single_double_precisions_complex_real
      - copy_strided_batched_bad_arg:  *single_double_precisions_complex_real

  - name: blas1_size_t
    category: stress
    matrix_size: *size_t_xy_range
    pointer_mode_device: false
    function:
      - copy:  *single_precision
    gpu_arch: ['90a','942']
    os_flags: LINUX

  - name: blas1_large_batch
    category: stress
    N: [ 5 ]
    incx: 1
    incy: 1
    batch_count: [ *c_grid_yz_require_passes ]
    stride_scale: [ 1 ]
    function:
      - copy_batched:  *single_double_precisions_complex_real
      - copy_strided_batched:  *single_double_precisions_complex_real


  # quick tests will fallback to original kernels at launcher level
  - name: copy_ILP64
    category: pre_checkin
    N: [ 64 ]
    incx_incy: *incx_incy_range_small
    api: [ FORTRAN_64 ]
    function:
      - copy:  *single_double_precisions_complex_real
      - copy_batched:  *single_double_precisions_complex_real
      - copy_strided_batched:  *single_double_precisions_complex_real

  - name: copy_ILP64
    category: stress
    arguments:
      - { N: 2147483649, incx: 1, incy: 1,  batch_count: 1 }
      - { N: 2, incx: -214748369, incy: 1, batch_count: 1 }
      - { N: 2, incx: 1, incy: -1, stride_x: 2, stride_y: 2, batch_count: *c_grid_yz_require_passes }
    api: [ C_64 ]
    os_flags: [ LINUX ]
    function:
      - copy:  *single_precision
      - copy_batched:  *single_precision
      - copy_strided_batched:  *single_precision

# quick

  - name: blas1
    category: quick
    N: [ -1, 0, 1025]
    incx_incy: *incx_incy_range_small
    api: [FORTRAN, C_64]
    function:
      - copy: *single_double_precisions_complex_real

  - name: blas1
    category: quick
    N: [ -1, 0, 1025, 13000]
    incx_incy: *incx_incy_range
    function:
      - copy: *single_double_precisions_complex_real

  - name: blas1_batched
    category: quick
    N: [ -1, 0, 1025]
    incx_incy: *incx_incy_range
    batch_count: [257]
    function:
      - copy_batched: *single_double_precisions_complex_real

  - name: blas1_batched
    category: quick
    N: [2025]
    incx_incy: *incx_incy_range_small
    batch_count: [-1, 0, 5]
    api: FORTRAN
    function:
      - copy_batched: *single_double_precisions_complex_real

  - name: blas1_strided_batched
    category: quick
    N: [ -1, 0, 1023]
    incx_incy: *incx_incy_range
    batch_count: [257]
    stride_scale: [ 1 ]
    function:
      - copy_strided_batched:  *single_double_precisions_complex_real

  - name: blas1_strided_batched
    category: quick
    N: [1025]
    incx_incy: *incx_incy_range_small
    batch_count: [-1, 0, 5]
    stride_scale: [1]
    api: FORTRAN
    function:
      - copy_strided_batched: *single_double_precisions_complex_real

# pre_checkin
  - name: blas1
    category: pre_checkin
    N: [ 5000, 800000 ]
    pointer_mode_host: false
    incx_incy: *incx_incy_range_small
    function:
      - copy: *single_double_precisions_complex_real

  - name: blas1_batched
    category: pre_checkin
    N: [ 5000, 800000 ]
    pointer_mode_device: false
    incx_incy: *incx_incy_range_small
    batch_count: [5]
    function:
      - copy_batched: *single_double_precisions_complex_real

  - name: blas1_strided_batched
    category: pre_checkin
    N: [ 5000, 800000 ]
    pointer_mode_host: false
    incx_incy: *incx_incy_range_small
    batch_count: [3]
    stride_scale: [ 1 ]
    function:
      - copy_strided_batched:  *single_double_precisions_complex_real

# nightly
  - name: blas1
    category: nightly
    N: [ 1000000 ]
    pointer_mode_device: false
    incx_incy: *incx_incy_range_small
    function:
      - copy: *single_double_precisions_complex_real

  - name: blas1_batched
    category: nightly
    N: [ 1000000 ]
    pointer_mode_host: false
    incx_incy: *incx_incy_range_small
    batch_count: [1, 7]
    function:
      - copy_batched:  *single_double_precisions_complex_real

  - name: blas1_strided_batched
    category: nightly
    N: [ 1000000 ]
    pointer_mode_device: false
    incx_incy: *incx_incy_range_small
    batch_count: [1, 7]
    stride_scale: [ 1 ]
    function:
      - copy_strided_batched:  *single_double_precisions_complex_real

# extras

  - name: blas1_nan_check
    category: pre_checkin
    arguments: *blas1_nan_common_args
    function:
      - copy:  *single_double_precisions_complex_real
      - copy_batched:  *single_double_precisions_complex_real
      - copy_strided_batched:  *single_double_precisions_complex_real

  - name: blas1_graph_check
    category: pre_checkin
    arguments: *blas1_graph_test_common_args
    function:
      - copy:  *single_double_precisions_complex_real
      - copy_batched:  *single_double_precisions_complex_real
      - copy_strided_batched:  *single_double_precisions_complex_real

# not applicable
# - name: blas1_repeatability_check


...
